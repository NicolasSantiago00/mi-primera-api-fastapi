# semana-07/main.py

from fastapi import FastAPI
from contextlib import asynccontextmanager
from sqlalchemy.orm import Session # Necesaria para tipado, aunque no se use directamente aqu√≠

# 1. IMPORTACIONES DE LA BASE DE DATOS Y CRUD (ASUMIMOS ARCHIVOS EN LA RA√çZ)
from database import Base, engine # Base y engine son necesarios para crear tablas
from crud import get_db # Lo incluimos por si hace falta, aunque no es usado en main

# 2. IMPORTACIONES DE LA OPTIMIZACI√ìN Y CACHING
from app.routers import clase_optimized          # Router de la Pr√°ctica 23 (Caching)
from app.cache.domain_strategies import DomainSpecificCaching
from app.database.indexes import DomainIndexes   # üö® NUEVA IMPORTACI√ìN (Creaci√≥n de √çndices)
from app.routers import optimized_domain_routes  # üö® NUEVA IMPORTACI√ìN (Router optimizado)


# --- EVENTOS DE INICIO Y CIERRE DE LA APLICACI√ìN (LIFESPAN) ---

@asynccontextmanager
async def lifespan(app: FastAPI):
    # C√ìDIGO DE INICIO (STARTUP)
    
    # 1. Crea las tablas si no existen 
    Base.metadata.create_all(bind=engine) 
    
    # üö® PASO 1: CREAR √çNDICES ESPEC√çFICOS DE LA PR√ÅCTICA 24
    print("Creando √≠ndices optimizados para el dominio (Pr√°ctica 24)...")
    DomainIndexes.create_indexes_for_domain("type_b") # Tipo B = Horarios y Disponibilidad
    
    # 2. PASO 2: Ejecuta la precarga de cach√© de Redis (Pr√°ctica 23)
    print("Iniciando precarga de cache de Academia de M√∫sica...")
    # Aseg√∫rate de que el servicio Redis Server est√© activo
    await DomainSpecificCaching.implement_domain_cache("edu_")
    print("Precarga de cache finalizada.")

    yield
    
    # C√ìDIGO DE CIERRE (SHUTDOWN)
    print("Aplicaci√≥n cerr√°ndose...")
    
    
# --- INICIALIZACI√ìN DE FASTAPI ---

app = FastAPI(
    title="Academia de M√∫sica - Optimizada (Semana 07)",
    version="1.0",
    description="API con caching Redis y optimizaci√≥n de DB.",
    lifespan=lifespan # Conecta los eventos de inicio y cierre
)


# --- INCLUSI√ìN DE ROUTERS ---

# Conecta el router de la Pr√°ctica 23 (Caching)
app.include_router(clase_optimized.router)

# üö® NUEVO: Conecta el router de la Pr√°ctica 24 (Optimizaci√≥n DB)
app.include_router(optimized_domain_routes.router)

# Ruta simple para verificar que la app est√© viva
@app.get("/")
def read_root():
    return {"status": "ok", "message": "API de Academia de M√∫sica activa con caching y DB optimizada."}
